{
  "paragraphs": [
    {
      "text": "%spark.sql \n--daily\n    select A.total_users,B.new_users,C.paid_users,D.active_users,(C.paid_users-E.paid_active_users) as inactive_users\n    from \n    (SELECT \n        dt, \n        count(distinct user_id) as total_users\n    FROM usage_derived.upm_by_user_daily\n    WHERE dt\u003d \u0027\"\"\" + DT + \"\"\"\u0027 AND is_external\u003d\u00271\u0027\n    group by dt\n    ) as A \n    JOIN\n    (\n    select dt, \n        count(distinct user_id) as new_users\n    FROM usage_derived.upm_newuser_daily\n    WHERE dt \u003d \u002720160802\u0027 AND is_external\u003d1 and firstday\u003d\u002720160802\u0027\n    group by dt\n    ) as B\n    on A.dt\u003dB.dt\n    JOIN \n    (\n    select dt, \n        count(distinct user_id) as paid_users\n    FROM usage_derived.upm_by_user_daily\n    WHERE dt \u003d \u002720160802\u0027 AND is_external\u003d1 and is_commercial\u003d1\n    group by dt\n    \n    )as C\n    on A.dt\u003dC.dt\n    JOIN\n    (\n    select dt, \n        count(distinct user_id) as active_users\n    FROM usage_derived.upm_active_users_daily\n    WHERE dt \u003d maxdate and dt \u003d \u002720160802\u0027  and active_count \u003e\u003d 8\n    group by dt\n    \n    ) as D\n    on A.dt\u003dD.dt\n    JOIN\n    (\n    select A.dt, \n        count(distinct A.user_id) as paid_active_users\n    FROM \n    \n    (\n    select dt,\n        user_id\n    FROM usage_derived.upm_by_user_daily\n    WHERE dt \u003d \u002720160802\u0027 AND is_external\u003d1 and is_commercial\u003d1\n    group by dt,user_id\n    \n    )as A\n    JOIN\n    (\n    select dt, \n        user_id\n    FROM usage_derived.upm_active_users_daily\n    WHERE dt \u003d maxdate and dt \u003d \u002720160802\u0027   and active_count \u003e\u003d 8\n    group by dt,user_id\n    \n    ) as B\n    on A.dt\u003dB.dt\n    group by A.dt\n    ) as E\n    on A.dt\u003dE.dt\n    ",
      "dateUpdated": "Oct 28, 2016 6:01:38 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1473381460669_-977950492",
      "id": "20160909-003740_2048484438",
      "dateCreated": "Sep 9, 2016 12:37:40 AM",
      "dateStarted": "Sep 14, 2016 8:59:55 PM",
      "dateFinished": "Sep 14, 2016 8:59:58 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\n--weekly\n    select A.total_users,B.new_users,C.paid_users,D.active_users,(C.paid_users-E.paid_active_users) as inactive_users\n    from \n    (SELECT \n        dt, \n        count(distinct user_id) as total_users\n    FROM usage_derived.upm_by_user_daily\n    WHERE dt between \u002720160801\u0027 and \u002720160808\u0027AND is_external\u003d1\n    group by dt\n    ) as A \n    JOIN\n    (\n    select dt, \n        count(distinct user_id) as new_users\n    FROM usage_derived.upm_newuser_daily\n    WHERE dt between \u002720160801\u0027 and \u002720160808\u0027 AND is_external\u003d1 and firstday\u003d\u002720160801\u0027\n    group by dt\n    ) as B\n    on A.dt\u003dB.dt\n    JOIN\n    (\n    select dt, \n        count(distinct user_id) as paid_users\n    FROM usage_derived.upm_by_user_daily\n    WHERE dt between \u002720160801\u0027 and \u002720160808\u0027 AND is_external\u003d1 and is_commercial\u003d1\n    group by dt\n    \n    )as C\n    on A.dt\u003dC.dt\n    JOIN\n    (\n    select dt, \n        count(distinct user_id) as active_users\n    FROM usage_derived.upm_active_users_daily\n    WHERE dt \u003d maxdate and dt between \u002720160801\u0027 and \u002720160808\u0027  and active_count \u003e\u003d 8\n    group by dt\n    \n    ) as D\n    on A.dt\u003dD.dt\n    JOIN\n    (\n    select A.dt, \n        count(distinct A.user_id) as paid_active_users\n    FROM \n    \n    (\n    select dt,\n        user_id\n    FROM usage_derived.upm_by_user_daily\n    WHERE dt between \u002720160801\u0027 and \u002720160808\u0027 AND is_external\u003d1 and is_commercial\u003d1\n    group by dt,user_id\n    \n    )as A\n    JOIN\n    (\n    select dt, \n        user_id\n    FROM usage_derived.upm_active_users_daily\n    WHERE dt \u003d maxdate and dt between \u002720160801\u0027 and \u002720160808\u0027   and active_count \u003e\u003d 8\n    group by dt,user_id\n    \n    ) as B\n    on A.user_id\u003dB.user_id\n    group by A.dt\n    ) as E\n    on A.dt\u003dE.dt\n    \n    ",
      "dateUpdated": "Oct 28, 2016 6:01:38 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1473876757256_95690216",
      "id": "20160914-181237_1210189220",
      "dateCreated": "Sep 14, 2016 6:12:37 PM",
      "dateStarted": "Sep 14, 2016 8:54:50 PM",
      "dateFinished": "Sep 14, 2016 8:54:55 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\n--monthly\n    select A.total_users,B.new_users,C.paid_users,D.active_users,(C.paid_users-E.paid_active_users) as inactive_users\n    from \n    (SELECT \n        dt, \n        count(distinct user_id) as total_users\n    FROM usage_derived.upm_by_user_daily\n    WHERE dt between \u002720160801\u0027 and \u002720160831\u0027AND is_external\u003d1\n    group by dt\n    ) as A \n    JOIN\n    (\n    select dt, \n        count(distinct user_id) as new_users\n    FROM usage_derived.upm_newuser_daily\n    WHERE dt between \u002720160801\u0027 and \u002720160831\u0027 AND is_external\u003d1 and firstday\u003d\u002720160801\u0027\n    group by dt\n    ) as B\n    on A.dt\u003dB.dt\n    JOIN\n    (\n    select dt, \n        count(distinct user_id) as paid_users\n    FROM usage_derived.upm_by_user_daily\n    WHERE dt between \u002720160801\u0027 and \u002720160831\u0027 AND is_external\u003d1 and is_commercial\u003d1\n    group by dt\n    \n    )as C\n    on A.dt\u003dC.dt\n    JOIN\n    (\n    select dt, \n        count(distinct user_id) as active_users\n    FROM usage_derived.upm_active_users_daily\n    WHERE dt \u003d maxdate and dt between \u002720160801\u0027 and \u002720160831\u0027  and active_count \u003e\u003d 8\n    group by dt\n    \n    ) as D\n    on A.dt\u003dD.dt\n    JOIN\n    (\n    select A.dt, \n        count(distinct A.user_id) as paid_active_users\n    FROM \n    (\n    select dt,\n        user_id\n    FROM usage_derived.upm_by_user_daily\n    WHERE dt between \u002720160801\u0027 and \u002720160831\u0027 AND is_external\u003d1 and is_commercial\u003d1\n    group by dt,user_id\n    \n    )as A\n    JOIN\n    (\n    select dt, \n        user_id\n    FROM usage_derived.upm_active_users_daily\n    WHERE dt \u003d maxdate and dt between \u002720160801\u0027 and \u002720160831\u0027   and active_count \u003e\u003d 8\n    group by dt,user_id\n    \n    ) as B\n    on A.user_id\u003dB.user_id\n    group by A.dt\n    ) as E\n    on A.dt\u003dE.dt\n    \n    ",
      "dateUpdated": "Oct 28, 2016 6:01:38 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1473885648582_82004688",
      "id": "20160914-204048_1293173778",
      "dateCreated": "Sep 14, 2016 8:40:48 PM",
      "dateStarted": "Sep 14, 2016 8:56:41 PM",
      "dateFinished": "Sep 14, 2016 8:56:44 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\n\n--New Users by country\n\ncreate temp table users_new as (\n select user_id,\nmax(geo_cc) as geo_cc,--wrong\nmin(FROM_UNIXTIME(UNIX_TIMESTAMP(first_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027)) as first_login_date,\nmin(case when (component_name like \u0027%Save%\u0027 OR component_name like \u0027%Import%\u0027) then FROM_UNIXTIME(UNIX_TIMESTAMP(first_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027))\n    else null end ) as first_save_date\nfrom usage.usage_events_by_user_daily\nwhere event_type\u003d\u0027presence\u0027\nand product_line_id\u003d\u0027NINVFUS\u0027\nand dt\u003d \u002720160824\u0027--latest partition\ngroup by user_id\n    )\n\n\nselect\ngeo_cc,\nfirst_login_day,\ncount(user_id)\nfrom\nusers_new\ngroup by geo_cc,first_login_day;\n\n\n/* --wrong one\nselect\ngeo_cc,\nFROM_UNIXTIME(UNIX_TIMESTAMP(first_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027) as day,\ncount(distinct user_id)\nfrom usage.usage_events_by_user_daily\nwhere event_type\u003d\u0027presence\u0027\nand product_line_id\u003d\u0027NINVFUS\u0027\nand dt \u003d \u002720160810\u0027\ngroup by geo_cc,FROM_UNIXTIME(UNIX_TIMESTAMP(first_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027)\n*/\n\n--MAU\nselect dt,\ncount(distinct user_id)\nfrom usage.usage_events_by_user_daily\nwhere event_type\u003d\u0027presence\u0027\nand product_line_id\u003d\u0027NINVFUS\u0027\nand dt\u003d\u002720160824\u0027\nand (component_name like \u0027%Save%\u0027 OR component_name like \u0027%Import%\u0027)\nand CASE WHEN (datediff(from_unixtime(unix_timestamp(dt ,\u0027yyyyMMdd\u0027), \u0027yyyy-MM-dd\u0027), FROM_UNIXTIME(UNIX_TIMESTAMP(last_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027)) \u003c\u003d30) AND (datediff(from_unixtime(unix_timestamp(dt ,\u0027yyyyMMdd\u0027), \u0027yyyy-MM-dd\u0027), FROM_UNIXTIME(UNIX_TIMESTAMP(first_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027)) \u003e\u003d14) then 1 ELSE 0 END \u003d1\ngroup by dt\n\n--M1\u0026M4 User \n\ncreate temp table user_first_tmp as( \nselect user,\nlast_day(first_login_date) as lastday_of_first_login_month --\u002720160731\u0027\nfrom users_new\nwhere last_day(first_login_date)\u003dlast_day(first_save_date)\nand first_login_date between \u002720160701\u0027 and \u002720160731\u0027\n) \n/*and months_between(last_day(FROM_UNIXTIME(UNIX_TIMESTAMP(last_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027)),last_day(FROM_UNIXTIME(UNIX_TIMESTAMP(first_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027)))\n*/\n\ncreate temp table user_second_tmp as( \nselect user_id,\nlast_day(FROM_UNIXTIME(UNIX_TIMESTAMP(last_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027)) as lastday_of_second_save_month\nfrom usage.usage_events_by_user_daily \non b.event_type\u003d\u0027activity\u0027\nand dt \u003e\u003d \u002720160801\u0027 \nand product_line_id\u003d\u0027NINVFUS\u0027\nand  (component_name like \u0027%Save%\u0027 OR component_name like \u0027%Import%\u0027)\ngroup by user_id,last_day(FROM_UNIXTIME(UNIX_TIMESTAMP(last_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027))\n)\n\n\nselect\na.lastday_of_first_login_month,\ncount(*),\ncount( case when months_between(lastday_of_second_save_month,lastday_of_first_login_month)\u003d1.0 then 1 else null end) m1_cnt,\ncount( case when months_between(lastday_of_second_save_month,lastday_of_first_login_month)\u003d4.0 then 4 else null end) m4_cnt,\nfrom user_first_tmp a\nleft outer join user_second_tmp b\non a.user_id\u003db.user_id\ngroup by lastday_of_first_login_month\n\n\n--Workspace Usage \n--MAU or Non MAU\n\nselect \ndt,\ncomponent_type,\ncase when  (component_name like \u0027%Save%\u0027 OR component_name like \u0027%Import%\u0027) then 1 else 0 end as save_import_flag,\ncount(distinct user_id) as user_cnt\nfrom usage.usage_events_by_user_daily\nwhere event_type\u003d\u0027activity\u0027\nand product_line_id\u003d\u0027NINVFUS\u0027\nand dt\u003d\u002720160821\u0027\ngroup by dt, component_type,case when  (component_name like \u0027%Save%\u0027 OR component_name like \u0027%Import%\u0027) then 1 else 0 end\n\n\n--User Segment by Distinct Command Count\nselect dt,\ncount(*) as all_cnt,\ncount(case when commands_cnt\u003e\u003d3 then 1 else null end) as c3_cnt,\ncount(case when commands_cnt\u003e\u003d5 then 1 else null end) as c5_cnt \nfrom (\nselect dt,user_id,count(distinct component_name) as commands_cnt\nfrom usage.usage_events_by_user_daily\nwhere event_type\u003d\u0027activity\u0027\nand product_line_id\u003d\u0027NINVFUS\u0027\nand dt\u003d\u002720160821\u0027\nand (component_name like \u0027%Save%\u0027 OR component_name like \u0027%Import%\u0027)\nand component_name in \n(\u0027FusionCreateComponentFromBodyCommand\u0027, \n\u0027FusionCombineCommand\u0027, \n\u0027ChangeParameterCommand\u0027,\n\u0027FusionReorderCommand\u0027,\n \u0027FusionRollCommand\u0027,\n \u0027SketchDimension\u0027,\n \u0027SketchEditDimensionCmdDef\u0027,\n \u0027WorkPlaneOffsetFromPlaneCommand\u0027,\n \u0027WorkPlaneFromTwoPlanesCommand\u0027,\n \u0027IronGenerateToolpath\u0027,\n \u0027IronPostProcess\u0027,\n \u0027SaveAsImageCommand\u0027,\n \u0027NewFromLocalCommand\u0027,\n \u0027TSplineEditCommand\u0027,\n \u0027FusionShellBodyCommand\u0027,\n \u0027FusionDraftCommand\u0027) \ngroup by dt,user_id\n) as tmp\ngroup by dt",
      "dateUpdated": "Oct 28, 2016 6:01:38 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1473886601463_1332397574",
      "id": "20160914-205641_1662263503",
      "dateCreated": "Sep 14, 2016 8:56:41 PM",
      "dateStarted": "Oct 11, 2016 9:05:23 PM",
      "dateFinished": "Oct 11, 2016 9:06:04 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\n\n--M1_user\nselect \nlast_day(FROM_UNIXTIME(UNIX_TIMESTAMP(first_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027)) as month, -- substr to YYYY-MM\nuser_id,\nmonths_between(last_day(FROM_UNIXTIME(UNIX_TIMESTAMP(last_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027)),last_day(FROM_UNIXTIME(UNIX_TIMESTAMP(first_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027))) as month_diff\nfrom usage.usage_events_by_user_daily\nwhere event_type\u003d\u0027presence\u0027\nand dt \u003e\u003d \u002720160801\u0027and  dt\u003c\u003d\u002720160831\u0027\nand product_line_id\u003d\u0027NINVFUS\u0027\nand (component_name like \u0027%Save%\u0027 OR component_name like \u0027%Import%\u0027)\ngroup by \nlast_day(FROM_UNIXTIME(UNIX_TIMESTAMP(first_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027)),\nuser_id,\nmonths_between(last_day(FROM_UNIXTIME(UNIX_TIMESTAMP(last_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027)),last_day(FROM_UNIXTIME(UNIX_TIMESTAMP(first_event_date,\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\"),\u0027yyyy-MM-dd\u0027)))\n\n\nselect \nfrom m1_user \nleft outer join new_user\nwhere \nm1_user.month\u003d\u00272016-07-31\u0027\n\n\n\n\n) as user_flag\nwhere month\u003d\u00272016-07-31\u0027\nand month_diff\u003d1.0\ngroup by month\n\n\n\n",
      "dateUpdated": "Oct 28, 2016 6:01:38 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "month",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "month",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1476221562737_2063913882",
      "id": "20161011-213242_909979269",
      "dateCreated": "Oct 11, 2016 9:32:42 PM",
      "dateStarted": "Oct 13, 2016 11:25:34 PM",
      "dateFinished": "Oct 13, 2016 11:28:08 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect \n  \u0027command_usage\u0027 as metric_name,\n  \u0027all MAU\u0027 as dimension_1,\n  NULL as dimension_2,\n  count(*) as count\nfrom  temp.tmp_command_cnt_by_user\ngroup by \n  \u0027command_usage\u0027,\n  \u0027all MAU\u0027\n\nunion \n\nselect \n  \u0027command_usage\u0027 as metric_name,\n  \u00273+ commands\u0027 as dimension_1,\n  NULL as dimension_2,\n  count(case when commands_cnt\u003e\u003d3 then 1 else null end)  as count\nfrom  temp.tmp_command_cnt_by_user\ngroup by \n  \u0027command_usage\u0027,\n  \u00273+ commands\u0027\n\nunion \n\nselect \n  \u0027command_usage\u0027 as metric_name,\n  \u00275+ commands\u0027 as dimension_1,\n  NULL as dimension_2,\n  count(case when commands_cnt\u003e\u003d5 then 1 else null end) as count\nfrom  temp.tmp_command_cnt_by_user\ngroup by \n  \u0027command_usage\u0027,\n  \u00275+ commands\u0027",
      "dateUpdated": "Oct 28, 2016 6:01:38 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "metric_name",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "dimension_1",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "metric_name",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "dimension_1",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {
          "DATABASE_TEMP": ""
        },
        "forms": {}
      },
      "jobName": "paragraph_1476398814166_-74058576",
      "id": "20161013-224654_2000955362",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "metric_name\tdimension_1\tdimension_2\tcount\ncommand_usage\t3+ commands\tnull\t8662\ncommand_usage\t5+ commands\tnull\t5110\ncommand_usage\tall MAU\tnull\t12450\n"
      },
      "dateCreated": "Oct 13, 2016 10:46:54 PM",
      "dateStarted": "Oct 28, 2016 12:20:35 AM",
      "dateFinished": "Oct 28, 2016 12:21:41 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nSELECT \n \u0027workspace_usage\u0027 AS metric_name,\n  component_type as dimension_1 ,\n  case when  (component_name like \u0027%Save%\u0027 OR component_name like \u0027%Import%\u0027) then \u0027MAU\u0027 else \u0027Non-MAU\u0027 end as dimension_2,\n  count(distinct user_id) as count\nFROM \n  usage.usage_events_by_user_daily\nWHERE \n  event_type\u003d\u0027activity\u0027\nAND \n  product_line_id\u003d\u0027NINVFUS\u0027\nAND \n  dt\u003e\u003d\u002720160701\u0027\nAND\n  dt\u003c\u002720160801\u0027\nGROUP BY\n  component_type,\n  case when  (component_name like \u0027%Save%\u0027 OR component_name like \u0027%Import%\u0027) then \u0027MAU\u0027 else \u0027Non-MAU\u0027 end \n\n",
      "dateUpdated": "Oct 31, 2016 8:37:37 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {
          "DB_NM": "",
          "PRODUCT_LINE_ID": "NINVFUSNINVFUS"
        },
        "forms": {}
      },
      "jobName": "paragraph_1477592627679_-1164406041",
      "id": "20161027-182347_32250013",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "metric_name\tdimension_1\tdimension_2\tcount\nworkspace_usage\t.CADexperience\tNon-MAU\t83\nworkspace_usage\tFusion360.SIMULUS.SIM_DOC\tNon-MAU\t231\nworkspace_usage\tFusion360.Render\tNon-MAU\t2825\nworkspace_usage\t.None\tNon-MAU\t15620\nworkspace_usage\twaypoint\tNon-MAU\t2057\nworkspace_usage\tnull\tNon-MAU\t20128\nworkspace_usage\t.Cloud\tNon-MAU\t3187\nworkspace_usage\tFusion360.Documentation\tNon-MAU\t1131\nworkspace_usage\tFusion360.Sheet Metal\tNon-MAU\t4\nworkspace_usage\t.Script\tNon-MAU\t1108\nworkspace_usage\tFusion360.Patch\tNon-MAU\t1532\nworkspace_usage\tFusion360.Patch\tMAU\t278\nworkspace_usage\tFusion360.Sculpt\tNon-MAU\t5222\nworkspace_usage\t.GettingStarted\tNon-MAU\t3311\nworkspace_usage\tFusion360.None\tNon-MAU\t17929\nworkspace_usage\tFusion360.Animation\tMAU\t127\nworkspace_usage\tFusion360.Simulation\tNon-MAU\t899\nworkspace_usage\tcommand\tNon-MAU\t5202\nworkspace_usage\tFusion360.Simulation Hub\tNon-MAU\t1\nworkspace_usage\tFusion360.CAM\tNon-MAU\t2535\nworkspace_usage\tFusion360.Mesh\tNon-MAU\t144\nworkspace_usage\t.Validation\tMAU\t831\nworkspace_usage\tFileAction\tMAU\t10943\nworkspace_usage\tFusion360.Model\tNon-MAU\t16608\nworkspace_usage\tFusion360.Model\tMAU\t10039\nworkspace_usage\tFusion360.Communication\tNon-MAU\t730\nworkspace_usage\t.Streamer\tNon-MAU\t6443\nworkspace_usage\t.UserFeedback\tNon-MAU\t51\nworkspace_usage\tFusion360.Cloud\tNon-MAU\t8137\nworkspace_usage\tFusion360.Cloud\tMAU\t6958\nworkspace_usage\tFusion360.Render\tMAU\t1489\nworkspace_usage\t.LiveReview\tNon-MAU\t58\nworkspace_usage\tFusion360.SIMULUS.SOLVE\tNon-MAU\t232\nworkspace_usage\tFusion360.Documentation\tMAU\t634\nworkspace_usage\t.TipsAndTricks\tNon-MAU\t286\nworkspace_usage\tFusion360.SIMULUS.SIM_SETTINGS\tNon-MAU\t309\nworkspace_usage\tFusion360.Sheet Metal\tMAU\t1\nworkspace_usage\tFusion360.Comments\tNon-MAU\t229\nworkspace_usage\t.Script\tMAU\t1\nworkspace_usage\tFusion360.Sculpt\tMAU\t1407\nworkspace_usage\tFusion360.Animation\tNon-MAU\t804\nworkspace_usage\tCollaboration\tNon-MAU\t1216\nworkspace_usage\tFusion360.None\tMAU\t2901\nworkspace_usage\tFusion360.Simulation\tMAU\t107\nworkspace_usage\tFusion360.CAM\tMAU\t1300\nworkspace_usage\t.Validation\tNon-MAU\t9689\nworkspace_usage\tFileAction\tNon-MAU\t17881\nworkspace_usage\tFusion360.Mesh\tMAU\t28\nworkspace_usage\tFusion360.Debug\tMAU\t1696\nworkspace_usage\tFusion360.Debug\tNon-MAU\t9\nworkspace_usage\tFusion360.LiveReview\tNon-MAU\t156\n"
      },
      "dateCreated": "Oct 27, 2016 6:23:47 PM",
      "dateStarted": "Oct 31, 2016 8:37:37 PM",
      "dateFinished": "Oct 31, 2016 8:37:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\n\nselect * from temp.tmp_upm_user_info_20160901 limit 10",
      "dateUpdated": "Nov 12, 2016 1:41:53 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "user_id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "geo_cc",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "user_id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "geo_cc",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1477679663294_848532870",
      "id": "20161028-183423_549948196",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "user_id\tgeo_cc\tfirst_login_date\tfirst_save_date\tlast_save_date\n"
      },
      "dateCreated": "Oct 28, 2016 6:34:23 PM",
      "dateStarted": "Nov 12, 2016 1:41:53 AM",
      "dateFinished": "Nov 12, 2016 1:42:11 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\n\n\nSELECT\n  user_id,\n  CASE WHEN first_login_date \u003e\u003d from_unixtime(unix_timestamp(\u0027${MONTH_M1}01\u0027,\u0027yyyyMMdd\u0027), \u0027yyyy-MM-dd\u0027) \n               AND first_login_date \u003c  from_unixtime(unix_timestamp(\u0027${MONTH}01\u0027,\u0027yyyyMMdd\u0027), \u0027yyyy-MM-dd\u0027) \n       THEN \u0027${MONTH_M1}\u0027 \n       ELSE \u0027${MONTH_M4}\u0027 END AS first_login_month,\n  CASE WHEN last_save_date \u003e\u003d from_unixtime(unix_timestamp(\u0027{$MONTH}01\u0027 ,\u0027yyyyMMdd\u0027), \u0027yyyy-MM-dd\u0027) \n               AND last_save_date \u003c \u0027${DT}\u0027\n       THEN 1 ELSE 0 END AS return_flag\nFROM\n  ${DATABASE_TEMP}.tmp_upm_user_info_20160801\nWHERE \n  last_day(first_login_date)\u003dlast_day(first_save_date) \nAND  \n(\n   (first_login_date \u003e\u003d from_unixtime(unix_timestamp(\u0027${MONTH_M1}01\u0027,\u0027yyyyMMdd\u0027), \u0027yyyy-MM-dd\u0027) \n    AND \n    first_login_date \u003c  from_unixtime(unix_timestamp(\u0027${MONTH}01\u0027,\u0027yyyyMMdd\u0027), \u0027yyyy-MM-dd\u0027) \n    )   \nOR \n   (first_login_date \u003e\u003d from_unixtime(unix_timestamp(\u0027${MONTH_M4}01\u0027,\u0027yyyyMMdd\u0027), \u0027yyyy-MM-dd\u0027)\n     AND \n    first_login_date \u003c  from_unixtime(unix_timestamp(\u0027${MONTH_M3}01\u0027,\u0027yyyyMMdd\u0027), \u0027yyyy-MM-dd\u0027)\n    ) \n)\nGROUP BY\n  user_id,\n  CASE WHEN first_login_date \u003e\u003d from_unixtime(unix_timestamp(\u0027${MONTH_M1}01\u0027,\u0027yyyyMMdd\u0027), \u0027yyyy-MM-dd\u0027) \n               AND first_login_date \u003c  from_unixtime(unix_timestamp(\u0027${MONTH}01\u0027,\u0027yyyyMMdd\u0027), \u0027yyyy-MM-dd\u0027)  \n       THEN \u0027${MONTH_M1}\u0027 \n       ELSE \u0027${MONTH_M4}\u0027 END,\n  CASE WHEN last_save_date \u003e\u003d from_unixtime(unix_timestamp(\u0027{$MONTH}01\u0027 ,\u0027yyyyMMdd\u0027), \u0027yyyy-MM-dd\u0027)\n               AND last_save_date \u003c \u0027${DT}\u0027\n       THEN 1 ELSE 0 END\n",
      "dateUpdated": "Nov 8, 2016 8:00:20 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "user_id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "first_login_month",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "user_id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "first_login_month",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {
          "DT": "20160801",
          "DATABASE_TEMP": "temp",
          "MONTH": "201607",
          "MONTH_M1": "201606",
          "MONTH_M3": "201605",
          "MONTH_M4": "201604"
        },
        "forms": {
          "MONTH_M3": {
            "name": "MONTH_M3",
            "defaultValue": "",
            "hidden": false
          },
          "DT": {
            "name": "DT",
            "defaultValue": "",
            "hidden": false
          },
          "DATABASE_TEMP": {
            "name": "DATABASE_TEMP",
            "defaultValue": "",
            "hidden": false
          },
          "MONTH_M4": {
            "name": "MONTH_M4",
            "defaultValue": "",
            "hidden": false
          },
          "MONTH": {
            "name": "MONTH",
            "defaultValue": "",
            "hidden": false
          },
          "MONTH_M1": {
            "name": "MONTH_M1",
            "defaultValue": "",
            "hidden": false
          }
        }
      },
      "jobName": "paragraph_1477938901965_231347755",
      "id": "20161031-183501_298864513",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "user_id\tfirst_login_month\treturn_flag\n"
      },
      "dateCreated": "Oct 31, 2016 6:35:01 PM",
      "dateStarted": "Nov 8, 2016 8:00:20 PM",
      "dateFinished": "Nov 8, 2016 8:00:23 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\ndesc legacy_bdp.identity_activity_daily_derived",
      "dateUpdated": "Nov 14, 2016 11:21:35 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1479165657896_852227919",
      "id": "20161114-232057_1718217018",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "col_name\tdata_type\tcomment\nday\tstring\tnull\ngbq_day\tstring\tnull\nconsumer_src\tstring\tnull\nproduct_line_code\tstring\tnull\npim\tstring\tnull\npigs\tstring\tnull\ncontext_user\tstring\tnull\neidm_id\tstring\tnull\ncsn\tstring\tnull\ncountry\tstring\tnull\nsubscription_flag\tstring\tnull\nindustry_segment\tstring\tnull\nindustry_group\tstring\tnull\nis_student\tstring\tnull\nis_external\tstring\tnull\nactivity_count\tbigint\tnull\nservicename\tstring\tnull\nproductname\tstring\tnull\n"
      },
      "dateCreated": "Nov 14, 2016 11:20:57 PM",
      "dateStarted": "Nov 14, 2016 11:21:35 PM",
      "dateFinished": "Nov 14, 2016 11:21:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1479165695078_1278007034",
      "id": "20161114-232135_2112477729",
      "dateCreated": "Nov 14, 2016 11:21:35 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Chengxi_NB",
  "id": "Y38BMY4WYQ1473381458",
  "angularObjects": {
    "2AZRYGVDR": [],
    "2BXQVD3YS113101473381762734": [],
    "2B3C5DVWA": []
  },
  "config": {},
  "info": {},
  "source": "FCN"
}